# 开发阶段的配置文件"""Django settings for meiduo_mall project.Generated by 'django-admin startproject' using Django 1.11.11.For more information on this file, seehttps://docs.djangoproject.com/en/1.11/topics/settings/For the full list of settings and their values, seehttps://docs.djangoproject.com/en/1.11/ref/settings/"""import datetimeimport os, sys# print(sys.path)# ['/Users/chao/Desktop/meiduo_27/meiduo_mall', '/Users/chao/Desktop/meiduo_27/meiduo_mall', '/Users/chao/.virtualenvs/meiduo_new/lib/python36.zip', '/Users/chao/.virtualenvs/meiduo_new/lib/python3.6', '/Users/chao/.virtualenvs/meiduo_new/lib/python3.6/lib-dynload', '/usr/local/Cellar/python3/3.6.2/Frameworks/Python.framework/Versions/3.6/lib/python3.6', '/Users/chao/.virtualenvs/meiduo_new/lib/python3.6/site-packages', '/Applications/PyCharm.app/Contents/helpers/pycharm_matplotlib_backend']# Build paths inside the project like this: os.path.join(BASE_DIR, ...)# 提供用来进行拼接的一个路径# /home/python/Desktop/meiduo/meiduo_mall/meiduo_mallBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))# print(BASE_DIR)sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))  # 追加apps也为项目导包路径# print(sys.path)# ['/Users/chao/Desktop/meiduo_27/meiduo_mall/meiduo_mall/apps', '/Users/chao/Desktop/meiduo_27/meiduo_mall', '/Users/chao/Desktop/meiduo_27/meiduo_mall', '/Users/chao/.virtualenvs/meiduo_new/lib/python36.zip', '/Users/chao/.virtualenvs/meiduo_new/lib/python3.6', '/Users/chao/.virtualenvs/meiduo_new/lib/python3.6/lib-dynload', '/usr/local/Cellar/python3/3.6.2/Frameworks/Python.framework/Versions/3.6/lib/python3.6', '/Users/chao/.virtualenvs/meiduo_new/lib/python3.6/site-packages', '/Applications/PyCharm.app/Contents/helpers/pycharm_matplotlib_backend']# Quick-start development settings - unsuitable for production# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/# SECURITY WARNING: keep the secret key used in production secret!SECRET_KEY = '(nx@1naz!ub21#_7+aq_m=%8^-z6qdpp+%-dv^9ce%!gp+a_!q'# SECURITY WARNING: don't run with debug turned on in production!DEBUG = True# 允许那些域名能访问Django服务器ALLOWED_HOSTS = ['*']# Application definition# 注册应用,安装应用INSTALLED_APPS = [    'django.contrib.admin',    'django.contrib.auth',    'django.contrib.contenttypes',    'django.contrib.sessions',    'django.contrib.messages',    'django.contrib.staticfiles',    'haystack',  # 全文检索    'rest_framework',    'corsheaders',  # cors跨域请求    # 只有当应用中需要使用模型迁移建表时,应用必须注册, 当应用中使用了模板要进行渲染时也需要注册    'users.apps.UsersConfig',  # 用户模块    'oauth.apps.OauthConfig',  # QQ模块    'areas.apps.AreasConfig',  # 省市区模块    'contents.apps.ContentsConfig',  # 首页广告模块    'goods.apps.GoodsConfig',  # 商品模块    'carts.apps.CartsConfig',  # 购物车模块    'orders.apps.OrdersConfig',  # 订单模块    'payment.apps.PaymentConfig',  # 支付模块    'coupon.apps.CouponConfig',]MIDDLEWARE = [    'corsheaders.middleware.CorsMiddleware',  # cors跨域请求中间件    'django.middleware.security.SecurityMiddleware',    'django.contrib.sessions.middleware.SessionMiddleware',    'django.middleware.common.CommonMiddleware',    'django.middleware.csrf.CsrfViewMiddleware',    'django.contrib.auth.middleware.AuthenticationMiddleware',    'django.contrib.messages.middleware.MessageMiddleware',    'django.middleware.clickjacking.XFrameOptionsMiddleware',]ROOT_URLCONF = 'meiduo_mall.urls'# 模板配置项TEMPLATES = [    {        'BACKEND': 'django.template.backends.jinja2.Jinja2',  # 修改模板引擎为Jinja2        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 配置模板文件加载路径        'APP_DIRS': True,        'OPTIONS': {            'context_processors': [                'django.template.context_processors.debug',                'django.template.context_processors.request',                'django.contrib.auth.context_processors.auth',                'django.contrib.messages.context_processors.messages',            ],            # 补充Jinja2模板引擎环境            'environment': 'meiduo_mall.utils.jinja2_env.jinja2_environment',        },    },]WSGI_APPLICATION = 'meiduo_mall.wsgi.application'# Database# https://docs.djangoproject.com/en/1.11/ref/settings/#databases# 数据库配置DATABASES = {    'default': {        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎        'HOST': '192.168.13.243',  # 数据库主机        'PORT': 3306,  # 数据库端口        'USER': 'root',  # 数据库用户名        'PASSWORD': 'mysql',  # 数据库用户密码        'NAME': 'meiduo_27'  # 数据库名字    },    'slave': {        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎        'HOST': '192.168.13.243',  # 数据库主机        'PORT': 8306,  # 数据库端口        'USER': 'root',  # 数据库用户名        'PASSWORD': 'mysql',  # 数据库用户密码        'NAME': 'meiduo_27'  # 数据库名字    }}# Password validation# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validatorsAUTH_PASSWORD_VALIDATORS = [    {        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',    },    {        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',    },    {        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',    },    {        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',    },]# Internationalization# https://docs.djangoproject.com/en/1.11/topics/i18n/# LANGUAGE_CODE = 'en-us'LANGUAGE_CODE = 'zh-hans'# TIME_ZONE = 'UTC'TIME_ZONE = 'Asia/Shanghai'USE_I18N = TrueUSE_L10N = True# USE_TZ = True  # 如果此设置为True数据库的时区还是会自动为UTCUSE_TZ = False# Static files (CSS, JavaScript, Images)# https://docs.djangoproject.com/en/1.11/howto/static-files/# 静态文件访问的路由前缀STATIC_URL = '/static/'# 配置静态文件加载路径STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]# redis数据库配置CACHES = {    "default": {  # 默认        "BACKEND": "django_redis.cache.RedisCache",        "LOCATION": "redis://192.168.13.243:6379/0",        "OPTIONS": {            "CLIENT_CLASS": "django_redis.client.DefaultClient",        }    },    "session": {  # session        "BACKEND": "django_redis.cache.RedisCache",        "LOCATION": "redis://192.168.13.243:6379/1",        "OPTIONS": {            "CLIENT_CLASS": "django_redis.client.DefaultClient",        }    },    "verify_code": {  # 图形验证码        "BACKEND": "django_redis.cache.RedisCache",        "LOCATION": "redis://192.168.13.243:6379/2",        "OPTIONS": {            "CLIENT_CLASS": "django_redis.client.DefaultClient",        }    },    "history": {  # 用户浏览记录        "BACKEND": "django_redis.cache.RedisCache",        "LOCATION": "redis://192.168.13.243:6379/3",        "OPTIONS": {            "CLIENT_CLASS": "django_redis.client.DefaultClient",        }    },    "carts": {  # 购物车数据        "BACKEND": "django_redis.cache.RedisCache",        "LOCATION": "redis://192.168.13.243:6379/4",        "OPTIONS": {            "CLIENT_CLASS": "django_redis.client.DefaultClient",        }    },    "coupon": {        "BACKEND": "django_redis.cache.RedisCache",        "LOCATION": "redis://192.168.13.243:6379/5",        "OPTIONS": {            "CLIENT_CLASS": "django_redis.client.DefaultClient",        }    },}# session配置SESSION_ENGINE = "django.contrib.sessions.backends.cache"  # 缓存SESSION_CACHE_ALIAS = "session"  # 缓存到redis的一号数据库# 日志输出器配置LOGGING = {    'version': 1,    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器    'formatters': {  # 日志信息显示的格式        'verbose': {            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'        },        'simple': {            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'        },    },    'filters': {  # 对日志进行过滤        'require_debug_true': {  # django在debug模式下才输出日志            '()': 'django.utils.log.RequireDebugTrue',        },    },    'handlers': {  # 日志处理方法        'console': {  # 向终端中输出日志            'level': 'INFO',            'filters': ['require_debug_true'],            'class': 'logging.StreamHandler',            'formatter': 'simple'        },        'file': {  # 向文件中输出日志            'level': 'INFO',            'class': 'logging.handlers.RotatingFileHandler',            'filename': os.path.join(os.path.dirname(BASE_DIR), 'logs/meiduo.log'),  # 日志文件的位置            'maxBytes': 300 * 1024 * 1024,            'backupCount': 10,            'formatter': 'verbose'        },    },    'loggers': {  # 日志器        'django': {  # 定义了一个名为django的日志器            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志            'propagate': True,  # 是否继续传递日志信息            'level': 'INFO',  # 日志器接收的最低日志级别        },    }}# 修改Django认证系统中的用户模型AUTH_USER_MODEL = 'users.User'# 自定义Django认证后端类AUTHENTICATION_BACKENDS = ['users.utils.UsernameMobileBackend']# 修改Django中登录界面的路由LOGIN_URL = '/login/'# QQ登录配置QQ_CLIENT_ID = '101518219'QQ_CLIENT_SECRET = '418d84ebdc7241efb79536886ae95224'QQ_REDIRECT_URI = 'http://www.meiduo.site:8000/oauth_callback'# 邮箱配置EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # 指定邮件后端EMAIL_PORT = 25  # 发邮件端口EMAIL_HOST = 'smtp.163.com'  # 发邮件主机EMAIL_HOST_USER = 'itcast99@163.com'  # 授权的邮箱EMAIL_HOST_PASSWORD = 'python99'  # 邮箱授权时获得的密码，非注册登录密码EMAIL_FROM = '美多商城<itcast99@163.com>'  # 发件人抬头# 邮箱验证链接EMAIL_VERIFY_URL = 'http://www.meiduo.site:8000/emails/verification/'# MEDIA_URL = 'http://192.168.13.243:8888/'# 自定义文件存储类DEFAULT_FILE_STORAGE = 'meiduo_mall.utils.fastdfs.fdfs_storage.FastDFSStorage'# HaystackHAYSTACK_CONNECTIONS = {    'default': {        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',        'URL': 'http://192.168.13.243:9200/',  # Elasticsearch服务器ip地址，端口号固定为9200        'INDEX_NAME': 'meiduo_mall',  # Elasticsearch建立的索引库的名称    },}HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'# 支付宝沙箱配置ALIPAY_APPID = '2016101100658486'ALIPAY_DEBUG = True  # 表示是沙箱环境还是真实支付环境ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do'ALIPAY_RETURN_URL = 'http://www.meiduo.site:8000/payment/status/'# sina 登录配置APP_KEY = '3305669385'APP_SECRET = '74c7bea69d5fc64f5c3b80c802325276'WEIBO_REDIRECT_URI = 'http://www.meiduo.site:8000/sina_callback'# 配置数据库读写路由DATABASE_ROUTERS = ['meiduo_mall.utils.db_router.MasterSlaveDBRouter']# CORSCORS_ORIGIN_WHITELIST = (    'http://127.0.0.1:8080',    'http://127.0.0.1:8000',    'http://localhost:8080',    'http://localhost:8000',    'http://www.meiduo.site:8000',    'http://www.meiduo.site:8080',    'http://api.meiduo.site:8000',    'http://api.meiduo.site:8080',)CORS_ALLOW_CREDENTIALS = True  # 允许携带cookieREST_FRAMEWORK = {    'DEFAULT_AUTHENTICATION_CLASSES': (        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',        'rest_framework.authentication.SessionAuthentication',        'rest_framework.authentication.BasicAuthentication',    ),}JWT_AUTH = {    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),}